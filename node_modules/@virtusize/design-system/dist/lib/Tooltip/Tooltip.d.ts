import { PropType } from "@vue/composition-api";
declare type Position = "top" | "bottom" | "left" | "right";
/**
 * A transient view that appears above other content, usually when a content or element is clicked.
 *
 * @param {string} closeButtonText - The text that shows on on the close button
 * @param {array} componentClass - Add custom classes on the component
 * @param {function} onClose - Callback function that is invoked when Tooltip is closed
 * @param {boolean} open - Open or dismiss Tooltip
 * @param {string} position - Positio of Tooltip relative to the content it is anchored to. Accepted values are top, bottom, left, right. Defaults to bottom.
 * @param {boolean} showCloseButton - Show close button
 * @param {HTMLElement} to - Element where Tooltip will anchor itself to
 */
declare const Tooltip: import("vue").ComponentOptions<import("vue").default, () => false | JSX.Element, never, never, {
    closeButtonText: StringConstructor;
    componentClass: {
        type: PropType<string[]>;
        default: () => never[];
    };
    onClose: {
        type: PropType<() => void>;
    };
    open: {
        type: BooleanConstructor;
        required: true;
    };
    position: {
        type: PropType<Position>;
        default: () => "bottom";
    };
    showCloseButton: {
        type: BooleanConstructor;
        default: () => true;
    };
    to: {
        type: {
            new (): HTMLElement;
            prototype: HTMLElement;
        };
        required: true;
    };
}, import("@vue/composition-api/dist/component/componentProps").ExtractPropTypes<{
    closeButtonText: StringConstructor;
    componentClass: {
        type: PropType<string[]>;
        default: () => never[];
    };
    onClose: {
        type: PropType<() => void>;
    };
    open: {
        type: BooleanConstructor;
        required: true;
    };
    position: {
        type: PropType<Position>;
        default: () => "bottom";
    };
    showCloseButton: {
        type: BooleanConstructor;
        default: () => true;
    };
    to: {
        type: {
            new (): HTMLElement;
            prototype: HTMLElement;
        };
        required: true;
    };
}, false>> & (new () => import("@vue/composition-api").ComponentRenderProxy<import("@vue/composition-api/dist/component/componentProps").ExtractPropTypes<{
    closeButtonText: StringConstructor;
    componentClass: {
        type: PropType<string[]>;
        default: () => never[];
    };
    onClose: {
        type: PropType<() => void>;
    };
    open: {
        type: BooleanConstructor;
        required: true;
    };
    position: {
        type: PropType<Position>;
        default: () => "bottom";
    };
    showCloseButton: {
        type: BooleanConstructor;
        default: () => true;
    };
    to: {
        type: {
            new (): HTMLElement;
            prototype: HTMLElement;
        };
        required: true;
    };
}, true>, () => false | JSX.Element, import("@vue/composition-api/dist/component/componentProps").ExtractPropTypes<{
    closeButtonText: StringConstructor;
    componentClass: {
        type: PropType<string[]>;
        default: () => never[];
    };
    onClose: {
        type: PropType<() => void>;
    };
    open: {
        type: BooleanConstructor;
        required: true;
    };
    position: {
        type: PropType<Position>;
        default: () => "bottom";
    };
    showCloseButton: {
        type: BooleanConstructor;
        default: () => true;
    };
    to: {
        type: {
            new (): HTMLElement;
            prototype: HTMLElement;
        };
        required: true;
    };
}, false>>);
export default Tooltip;
