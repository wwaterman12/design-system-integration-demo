"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _compositionApi = require("@vue/composition-api");

var _Icon = _interopRequireDefault(require("../Icon"));

var _Button = _interopRequireDefault(require("../Button"));

var _Modal = _interopRequireDefault(require("../Modal"));

var _Dialog = _interopRequireDefault(require("./Dialog.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Alerts users to provide important information or decision.
 * @param {array} componentClass - Add custom classes on the component.
 * @param {boolean} open - Open Dialog.
 * @param {function} onClose - Callback function to invoke when Dialog is closed
 * @param {function} onEnter - Callback function to invoke when Dialog is opened
 * @param {function} onExit - Callback function to invoke before Dialog is closed
 * @param {number} zIndex - Set Dialog's z-index.
 */
var Dialog = (0, _compositionApi.createComponent)({
  name: "Dialog",
  props: {
    componentClass: {
      type: Array,
      default: function _default() {
        return [];
      }
    },
    open: {
      type: Boolean,
      required: true
    },
    onClose: Object,
    onEnter: Object,
    onExit: Object,
    zIndex: Number
  },
  setup: function setup(props, context) {
    var isDialogOpen = (0, _compositionApi.ref)(false);
    var modal;

    var invokeTransitionHook = function invokeTransitionHook(event) {
      event.stopPropagation();
      isDialogOpen.value = props.open;
      context.emit(props.open ? "enter" : "exit");

      if (!props.open) {
        modal.removeEventListener("transitionend", invokeTransitionHook);
      }
    };

    (0, _compositionApi.watch)(function () {
      return props.open;
    }, function _callee(open) {
      var _ref;

      return regeneratorRuntime.async(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!open) {
                _context.next = 8;
                break;
              }

              isDialogOpen.value = open;
              _context.next = 4;
              return regeneratorRuntime.awrap(context.root.$nextTick());

            case 4:
              modal = (_ref = context.refs.modal) === null || _ref === void 0 ? void 0 : _ref.$el;

              if (modal) {
                modal.addEventListener("transitionend", invokeTransitionHook);
                setTimeout(function () {
                  modal.classList.add(_Dialog.default.open);
                }, 100);
              }

              _context.next = 9;
              break;

            case 8:
              if (modal) {
                modal.classList.remove(_Dialog.default.open);
              }

            case 9:
            case "end":
              return _context.stop();
          }
        }
      });
    });
    return function () {
      var _context$slots$defaul, _context$slots;

      return isDialogOpen.value && (0, _compositionApi.createElement)(_Modal.default, {
        "attrs": {
          "componentClass": [_Dialog.default.modal].concat(props.componentClass),
          "zIndex": props.zIndex
        },
        "on": {
          "click": function click() {
            context.emit("close");
          }
        },
        "ref": "modal"
      }, [(0, _compositionApi.createElement)("div", {
        "class": _Dialog.default.dialog,
        "on": {
          "click": function click(event) {
            return event.stopPropagation();
          }
        }
      }, [(0, _compositionApi.createElement)("div", {
        "class": _Dialog.default.controls
      }, [(0, _compositionApi.createElement)(_Button.default, {
        "attrs": {
          "round": true,
          "noBorder": true,
          "small": true
        },
        "on": {
          "click": function click() {
            return context.emit("close");
          }
        }
      }, [(0, _compositionApi.createElement)(_Icon.default, {
        "attrs": {
          "componentClass": [_Dialog.default.close],
          "name": "close",
          "size": "small"
        }
      })])]), (_context$slots$defaul = (_context$slots = context.slots).default) === null || _context$slots$defaul === void 0 ? void 0 : _context$slots$defaul.call(_context$slots)])]);
    };
  }
});
var _default2 = Dialog;
exports.default = _default2;