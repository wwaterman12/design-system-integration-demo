"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _compositionApi = require("@vue/composition-api");

var _TextView = _interopRequireDefault(require("../TextView"));

var _Ripple = _interopRequireDefault(require("./Ripple"));

var _Button = _interopRequireDefault(require("./Button.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Render a button in the document.
 * @param {string} type - Set the native button prop, sets the button type.
 * @param {boolean} block - Set the button as a block-level component.
 * @param {boolean} inverse - Set the inverted color scheme.
 * @param {boolean} disabled - Disable the component.
 * @param {boolean} elevated - Show a shadow behind the component. Defaults to true.
 * @param {boolean} fluid - Set the button to consume all available parent width.
 * @param {boolean} round - Remove the border around the component.
 * @param {boolean} noBorder - Remove the border around the component.
 * @param {string} textAlign - Button text alignment
 * @param {string} weight - The font weight. Acceptable values are bold, medium, regular. Defaults to bold.
 * @param {small} small - Render a small button.
 * @param {array} componentClass - Add custom classes on the component.
 */
var Button = (0, _compositionApi.createComponent)({
  name: "Button",
  props: {
    block: Boolean,
    disabled: Boolean,
    componentClass: {
      type: Array,
      default: function _default() {
        return [];
      }
    },
    elevated: {
      type: Boolean,
      default: function _default() {
        return true;
      }
    },
    fluid: Boolean,
    inverse: Boolean,
    noBorder: Boolean,
    onClick: Object,
    round: Boolean,
    small: Boolean,
    type: String,
    textAlign: {
      type: String,
      default: function _default() {
        return "center";
      }
    },
    weight: {
      type: String,
      default: function _default() {
        return "bold";
      }
    }
  },
  setup: function setup(props, context) {
    // Vue prepends "on" on event names, so "click" will become "onClick"
    var handleClick = function handleClick(event) {
      event.stopPropagation();
      context.emit("click", event);
    };

    var handleTransition = function handleTransition(event) {
      event.stopPropagation();
    };

    return function () {
      var _context$slots$defaul, _context$slots, _context$slots$defaul2, _context$slots2;

      return (0, _compositionApi.createElement)("button", {
        "attrs": {
          "type": props.type,
          "disabled": props.disabled
        },
        "class": [_Button.default.root, props.block ? _Button.default.blockLevel : "", props.elevated ? _Button.default.elevated : "", props.fluid ? _Button.default.fluid : "", props.inverse && !props.disabled ? _Button.default.inverse : "", props.small ? _Button.default.small : "", props.round ? _Button.default.round : "", props.noBorder ? _Button.default.noBorder : "", context.slots.leading || context.slots.trailing ? _Button.default.withSlot : ""].concat(props.componentClass),
        "on": {
          "click": handleClick,
          "transitionend": handleTransition
        }
      }, [context.slots.leading && (0, _compositionApi.createElement)("span", {
        "class": _Button.default.leading
      }, [context.slots.leading()]), props.round ? (_context$slots$defaul = (_context$slots = context.slots).default) === null || _context$slots$defaul === void 0 ? void 0 : _context$slots$defaul.call(_context$slots) : (0, _compositionApi.createElement)(_TextView.default, {
        "attrs": {
          "weight": props.weight,
          "size": props.small ? "small" : "normal",
          "align": props.textAlign,
          "block": true,
          "componentClass": [_Button.default.text]
        }
      }, [(_context$slots$defaul2 = (_context$slots2 = context.slots).default) === null || _context$slots$defaul2 === void 0 ? void 0 : _context$slots$defaul2.call(_context$slots2)]), context.slots.trailing && (0, _compositionApi.createElement)("span", {
        "class": _Button.default.trailing
      }, [context.slots.trailing()]), !props.disabled && !props.noBorder && (0, _compositionApi.createElement)(_Ripple.default)]);
    };
  }
});
var _default2 = Button;
exports.default = _default2;