import { PropType } from "@vue/composition-api";
import { MouseEvent } from "../../@types/tsx.shim";
declare type Weight = "regular" | "medium" | "bold";
declare type Event = MouseEvent;
/**
 * Render a button in the document.
 * @param {string} type - Set the native button prop, sets the button type.
 * @param {boolean} block - Set the button as a block-level component.
 * @param {boolean} inverse - Set the inverted color scheme.
 * @param {boolean} disabled - Disable the component.
 * @param {boolean} elevated - Show a shadow behind the component. Defaults to true.
 * @param {boolean} fluid - Set the button to consume all available parent width.
 * @param {boolean} round - Remove the border around the component.
 * @param {boolean} noBorder - Remove the border around the component.
 * @param {string} textAlign - Button text alignment
 * @param {string} weight - The font weight. Acceptable values are bold, medium, regular. Defaults to bold.
 * @param {small} small - Render a small button.
 * @param {array} componentClass - Add custom classes on the component.
 */
declare const Button: import("vue").ComponentOptions<import("vue").default, () => JSX.Element, never, never, {
    block: BooleanConstructor;
    disabled: BooleanConstructor;
    componentClass: {
        type: PropType<string[]>;
        default: () => never[];
    };
    elevated: {
        type: BooleanConstructor;
        default: () => true;
    };
    fluid: BooleanConstructor;
    inverse: BooleanConstructor;
    noBorder: BooleanConstructor;
    onClick: PropType<(event: Event) => void>;
    round: BooleanConstructor;
    small: BooleanConstructor;
    type: PropType<"button" | "reset" | "submit">;
    textAlign: {
        type: PropType<"left" | "right" | "center" | "justify">;
        default: () => "center";
    };
    weight: {
        type: PropType<Weight>;
        default: () => "bold";
    };
}, import("@vue/composition-api/dist/component/componentProps").ExtractPropTypes<{
    block: BooleanConstructor;
    disabled: BooleanConstructor;
    componentClass: {
        type: PropType<string[]>;
        default: () => never[];
    };
    elevated: {
        type: BooleanConstructor;
        default: () => true;
    };
    fluid: BooleanConstructor;
    inverse: BooleanConstructor;
    noBorder: BooleanConstructor;
    onClick: PropType<(event: Event) => void>;
    round: BooleanConstructor;
    small: BooleanConstructor;
    type: PropType<"button" | "reset" | "submit">;
    textAlign: {
        type: PropType<"left" | "right" | "center" | "justify">;
        default: () => "center";
    };
    weight: {
        type: PropType<Weight>;
        default: () => "bold";
    };
}, false>> & (new () => import("@vue/composition-api").ComponentRenderProxy<import("@vue/composition-api/dist/component/componentProps").ExtractPropTypes<{
    block: BooleanConstructor;
    disabled: BooleanConstructor;
    componentClass: {
        type: PropType<string[]>;
        default: () => never[];
    };
    elevated: {
        type: BooleanConstructor;
        default: () => true;
    };
    fluid: BooleanConstructor;
    inverse: BooleanConstructor;
    noBorder: BooleanConstructor;
    onClick: PropType<(event: Event) => void>;
    round: BooleanConstructor;
    small: BooleanConstructor;
    type: PropType<"button" | "reset" | "submit">;
    textAlign: {
        type: PropType<"left" | "right" | "center" | "justify">;
        default: () => "center";
    };
    weight: {
        type: PropType<Weight>;
        default: () => "bold";
    };
}, true>, () => JSX.Element, import("@vue/composition-api/dist/component/componentProps").ExtractPropTypes<{
    block: BooleanConstructor;
    disabled: BooleanConstructor;
    componentClass: {
        type: PropType<string[]>;
        default: () => never[];
    };
    elevated: {
        type: BooleanConstructor;
        default: () => true;
    };
    fluid: BooleanConstructor;
    inverse: BooleanConstructor;
    noBorder: BooleanConstructor;
    onClick: PropType<(event: Event) => void>;
    round: BooleanConstructor;
    small: BooleanConstructor;
    type: PropType<"button" | "reset" | "submit">;
    textAlign: {
        type: PropType<"left" | "right" | "center" | "justify">;
        default: () => "center";
    };
    weight: {
        type: PropType<Weight>;
        default: () => "bold";
    };
}, false>>);
export default Button;
