"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _compositionApi = require("@vue/composition-api");

var _GridItem = _interopRequireDefault(require("./GridItem.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ALIGN_SELF = {
  auto: "alignSelfAuto",
  flexStart: "alignSelfFlexStart",
  flexEnd: "alignSelfFlexEnd",
  center: "alignSelfCenter",
  baseline: "alignSelfBaseline",
  stretch: "alignSelfStretch"
};
var GRID_SIZE = {
  "1": ["xs1", "sm1", "md1", "lg1", "xl1"],
  "2": ["xs2", "sm2", "md2", "lg2", "xl2"],
  "3": ["xs3", "sm3", "md3", "lg3", "xl3"],
  "4": ["xs4", "sm4", "md4", "lg4", "xl4"],
  "5": ["xs5", "sm5", "md5", "lg5", "xl5"],
  "6": ["xs6", "sm6", "md6", "lg6", "xl6"],
  "7": ["xs7", "sm7", "md7", "lg7", "xl7"],
  "8": ["xs8", "sm8", "md8", "lg8", "xl8"],
  "9": ["xs9", "sm9", "md9", "lg9", "xl9"],
  "10": ["xs10", "sm10", "md10", "lg10", "xl10"],
  "11": ["xs11", "sm11", "md11", "lg11", "xl11"],
  "12": ["xs12", "sm12", "md12", "lg12", "xl12"]
};
/**
 * Act as a column in a grid row.
 *
 * Breakpoints are designed to be mobile first. It means that if you set a width on that one breakpoint, it will apply that same width to all the breakpoints above it.
 *
 * A width is a value from 1-12 (the grid is composed of 12 columns) and the GridItem will have a width that is equivalent to the number of columns based on the number on a certain breakpoint.
 *
 * If you don't specify a width on any of the GridItems they will automatically get equal widths.
 *
 * @param {string} alignSelf - Acceptable values are auto, flexStart, flexEnd, center, baseline, stretch. Defaults to auto.
 * @param {array} componentClass - Add custom classes on the component.
 * @param {string} basis - Default size of the GridItem before the remaining space is distributed. Defaults to 0.
 * @param {number} grow - Expand the GridItem when necessary. Negative numbers are not accepted.
 * @param {number} order - Controls in which order GridItem will appear in the GridContainer.
 * @param {number} shrink - Shrink the GridItem when necessary. Negative numbers are not accepted.
 * @param {number} xs - Width of the GridItem on extra-small breakpoint.
 * @param {number} sm - Width of the GridItem on small breakpoint.
 * @param {number} md - Width of the GridItem on medium breakpoint.
 * @param {number} lg - Width of the GridItem on large breakpoint.
 * @param {number} xl - Width of the GridItem on extra-large breakpoint.
 */

var GridItem = (0, _compositionApi.createComponent)({
  name: "GridItem",
  props: {
    alignSelf: String,
    componentClass: {
      type: Array,
      default: function _default() {
        return [];
      }
    },
    basis: String,
    grow: Number,
    order: Number,
    shrink: Number,
    xs: Number,
    sm: Number,
    md: Number,
    lg: Number,
    xl: Number
  },
  setup: function setup(props, context) {
    return function () {
      var _context$slots$defaul, _context$slots;

      return (0, _compositionApi.createElement)("div", {
        "class": [_GridItem.default.root, props.alignSelf ? _GridItem.default[ALIGN_SELF[props.alignSelf]] : "", props.xs ? _GridItem.default[GRID_SIZE[props.xs][0]] : "", props.sm ? _GridItem.default[GRID_SIZE[props.sm][1]] : "", props.md ? _GridItem.default[GRID_SIZE[props.md][2]] : "", props.lg ? _GridItem.default[GRID_SIZE[props.lg][3]] : "", props.xl ? _GridItem.default[GRID_SIZE[props.xl][4]] : ""].concat(props.componentClass),
        "style": {
          flexBasis: props.basis,
          flexGrow: props.grow,
          flexShrink: props.shrink,
          order: props.order
        }
      }, [(_context$slots$defaul = (_context$slots = context.slots).default) === null || _context$slots$defaul === void 0 ? void 0 : _context$slots$defaul.call(_context$slots)]);
    };
  }
});
var _default2 = GridItem;
exports.default = _default2;