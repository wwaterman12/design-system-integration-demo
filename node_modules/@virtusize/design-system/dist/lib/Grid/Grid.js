"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _compositionApi = require("@vue/composition-api");

var _Grid = _interopRequireDefault(require("./Grid.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ALIGN_CONTENT = {
  flexStart: "alignContentFlexStart",
  flexEnd: "alignContentFlexEnd",
  center: "alignContentCenter",
  stretch: "alignContentStretch",
  baseline: "alignContentBaseline"
};
var ALIGN_ITEMS = {
  flexStart: "alignItemsFlexStart",
  flexEnd: "alignItemsFlexEnd",
  center: "alignItemsCenter",
  stretch: "alignItemsStretch",
  baseline: "alignItemsBaseline"
};
var JUSTIFY_CONTENT = {
  flexStart: "justifyContentFlexStart",
  flexEnd: "justifyContentFlexEnd",
  center: "justifyContentCenter",
  spaceBetween: "justifyContentSpaceBetween",
  spaceAround: "justifyContentSpaceAround",
  spaceEvenly: "justifyContentSpaceEvenly"
};
/**
 * Mobile first 12-column grid system container based on [Flexbox](https://css-tricks.com/snippets/css/a-guide-to-flexbox/).
 * @param {string} alignContent - Acceptable values are flexStart, flexEnd, center, stretch, baseline. Defaults to stretch.
 * @param {array} componentClass - Add custom classes on the component.
 * @param {string} alignItems - Acceptable values are flexStart, flexEnd, center, stretch, baseline. Defaults to stretch.
 * @param {string} direction - Acceptable values are row, rowReverse, column, columnReverse. Defaults to row.
 * @param {boolean} gutter - DEPRECATED: Adds a space between grid items. Space will depend on the global baseline spacing value.
 * @param {string} height - GridContainer's height
 * @param {string} justifyContent - Acceptable values are flexStart, flexEnd, center, spaceBetween, spaceAround, spaceEvenly. Defaults to flexStart.
 * @param {boolean} withGutter - Adds a space between grid items. Space will depend on the global baseline spacing value.
 * @param {string} wrap - Acceptable values are noWrap, wrap, wrapReverse. Defaults to noWrap.
 */

var GridContainer = (0, _compositionApi.createComponent)({
  name: "GridContainer",
  props: {
    alignContent: String,
    componentClass: {
      type: Array,
      default: function _default() {
        return [];
      }
    },
    alignItems: String,
    direction: String,
    gutter: Boolean,
    height: String,
    justifyContent: String,
    withGutter: Boolean,
    wrap: String
  },
  setup: function setup(props, context) {
    return function () {
      var _context$slots$defaul, _context$slots;

      return (0, _compositionApi.createElement)("div", {
        "class": [_Grid.default.root, props.alignContent ? _Grid.default[ALIGN_CONTENT[props.alignContent]] : "", props.alignItems ? _Grid.default[ALIGN_ITEMS[props.alignItems]] : "", props.direction ? _Grid.default[props.direction] : "", props.justifyContent ? _Grid.default[JUSTIFY_CONTENT[props.justifyContent]] : "", props.wrap ? _Grid.default[props.wrap] : "", props.withGutter || props.gutter ? _Grid.default.withGutter : ""].concat(props.componentClass),
        "style": {
          height: props.height
        }
      }, [(_context$slots$defaul = (_context$slots = context.slots).default) === null || _context$slots$defaul === void 0 ? void 0 : _context$slots$defaul.call(_context$slots)]);
    };
  }
});
var _default2 = GridContainer;
exports.default = _default2;