import { PropType } from "@vue/composition-api";
declare type AlignSelf = "auto" | "flexStart" | "flexEnd" | "center" | "baseline" | "stretch";
declare type GridSize = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12;
/**
 * Act as a column in a grid row.
 *
 * Breakpoints are designed to be mobile first. It means that if you set a width on that one breakpoint, it will apply that same width to all the breakpoints above it.
 *
 * A width is a value from 1-12 (the grid is composed of 12 columns) and the GridItem will have a width that is equivalent to the number of columns based on the number on a certain breakpoint.
 *
 * If you don't specify a width on any of the GridItems they will automatically get equal widths.
 *
 * @param {string} alignSelf - Acceptable values are auto, flexStart, flexEnd, center, baseline, stretch. Defaults to auto.
 * @param {array} componentClass - Add custom classes on the component.
 * @param {string} basis - Default size of the GridItem before the remaining space is distributed. Defaults to 0.
 * @param {number} grow - Expand the GridItem when necessary. Negative numbers are not accepted.
 * @param {number} order - Controls in which order GridItem will appear in the GridContainer.
 * @param {number} shrink - Shrink the GridItem when necessary. Negative numbers are not accepted.
 * @param {number} xs - Width of the GridItem on extra-small breakpoint.
 * @param {number} sm - Width of the GridItem on small breakpoint.
 * @param {number} md - Width of the GridItem on medium breakpoint.
 * @param {number} lg - Width of the GridItem on large breakpoint.
 * @param {number} xl - Width of the GridItem on extra-large breakpoint.
 */
declare const GridItem: import("vue").ComponentOptions<import("vue").default, () => JSX.Element, never, never, {
    alignSelf: PropType<AlignSelf>;
    componentClass: {
        type: PropType<string[]>;
        default: () => never[];
    };
    basis: StringConstructor;
    grow: NumberConstructor;
    order: NumberConstructor;
    shrink: NumberConstructor;
    xs: PropType<GridSize>;
    sm: PropType<GridSize>;
    md: PropType<GridSize>;
    lg: PropType<GridSize>;
    xl: PropType<GridSize>;
}, import("@vue/composition-api/dist/component/componentProps").ExtractPropTypes<{
    alignSelf: PropType<AlignSelf>;
    componentClass: {
        type: PropType<string[]>;
        default: () => never[];
    };
    basis: StringConstructor;
    grow: NumberConstructor;
    order: NumberConstructor;
    shrink: NumberConstructor;
    xs: PropType<GridSize>;
    sm: PropType<GridSize>;
    md: PropType<GridSize>;
    lg: PropType<GridSize>;
    xl: PropType<GridSize>;
}, false>> & (new () => import("@vue/composition-api").ComponentRenderProxy<import("@vue/composition-api/dist/component/componentProps").ExtractPropTypes<{
    alignSelf: PropType<AlignSelf>;
    componentClass: {
        type: PropType<string[]>;
        default: () => never[];
    };
    basis: StringConstructor;
    grow: NumberConstructor;
    order: NumberConstructor;
    shrink: NumberConstructor;
    xs: PropType<GridSize>;
    sm: PropType<GridSize>;
    md: PropType<GridSize>;
    lg: PropType<GridSize>;
    xl: PropType<GridSize>;
}, true>, () => JSX.Element, import("@vue/composition-api/dist/component/componentProps").ExtractPropTypes<{
    alignSelf: PropType<AlignSelf>;
    componentClass: {
        type: PropType<string[]>;
        default: () => never[];
    };
    basis: StringConstructor;
    grow: NumberConstructor;
    order: NumberConstructor;
    shrink: NumberConstructor;
    xs: PropType<GridSize>;
    sm: PropType<GridSize>;
    md: PropType<GridSize>;
    lg: PropType<GridSize>;
    xl: PropType<GridSize>;
}, false>>);
export default GridItem;
