"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _compositionApi = require("@vue/composition-api");

var _Icon = _interopRequireDefault(require("../Icon"));

var _Button = _interopRequireDefault(require("../Button"));

var _Notification = _interopRequireDefault(require("./Notification.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var TYPE_ICON = {
  error: "alert",
  information: "informationSolid",
  success: "checkCircle"
};
/**
 * Provides user feedback from typical actions through meaningful messages.
 * @param {boolean} autoClose - Dismiss Notification automatically after a set timeout.
 * @param {number} autoCloseDelay - Specify the autoClose delay in milliseconds. Defaults to 2000.
 * @param {array} componentClass - Use custom classes on the component.
 * @param {boolean} isTimeout - DEPRECATED: Dismiss Notification automatically after a set timeout.
 * @param {boolean} open - Display the Notification.
 * @param {function} onClose - Callback function to invoke when Notification is dismissed
 * @param {string} type - Specify what type of Notification to display. Supported values are information, error, success. Defaults to information.
 * @param {boolean} visible - DEPRECATED: Display the Notification.
 */

var Notification = (0, _compositionApi.createComponent)({
  name: "Notification",
  props: {
    autoClose: Boolean,
    autoCloseDelay: {
      type: Number,
      default: function _default() {
        return 2000;
      },
      validator: function validator(prop) {
        return prop > 0;
      }
    },
    componentClass: {
      type: Array,
      default: function _default() {
        return [];
      }
    },
    isTimeout: Boolean,
    open: {
      type: Boolean,
      default: function _default() {
        return false;
      }
    },
    onClose: Object,
    type: {
      type: String,
      default: function _default() {
        return "information";
      }
    },
    visible: {
      type: Boolean,
      default: function _default() {
        return false;
      }
    }
  },
  setup: function setup(props, context) {
    var isNotificationOpen = (0, _compositionApi.ref)(false);
    var wrapper;
    var autoCloseTimer;

    var invokeTransitionHook = function invokeTransitionHook(event) {
      event.stopPropagation();
      isNotificationOpen.value = props.open || props.visible;

      if (!isNotificationOpen.value) {
        wrapper.removeEventListener("transitionend", invokeTransitionHook);
        context.emit("close");
      }
    };

    var toggle = function toggle(open) {
      return regeneratorRuntime.async(function toggle$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!open) {
                _context.next = 9;
                break;
              }

              isNotificationOpen.value = open;
              _context.next = 4;
              return regeneratorRuntime.awrap(context.root.$nextTick());

            case 4:
              wrapper = context.refs.wrapper;

              if (wrapper) {
                wrapper.addEventListener("transitionend", invokeTransitionHook);
                setTimeout(function () {
                  return wrapper.classList.add(_Notification.default.open);
                }, 0);
              }

              if (props.autoClose || props.isTimeout) {
                autoCloseTimer = setTimeout(function () {
                  return context.emit("close");
                }, props.autoCloseDelay);
              }

              _context.next = 11;
              break;

            case 9:
              clearTimeout(autoCloseTimer);

              if (wrapper) {
                wrapper.classList.remove(_Notification.default.open);
              }

            case 11:
            case "end":
              return _context.stop();
          }
        }
      });
    };

    (0, _compositionApi.watch)(function () {
      return props.open;
    }, toggle);
    (0, _compositionApi.watch)(function () {
      return props.visible;
    }, toggle);
    return function () {
      var _context$slots$defaul, _context$slots;

      return isNotificationOpen.value && (0, _compositionApi.createElement)("div", {
        "class": [_Notification.default.root].concat(props.componentClass),
        "ref": "wrapper"
      }, [(0, _compositionApi.createElement)(_Icon.default, {
        "attrs": {
          "name": TYPE_ICON[props.type],
          "componentClass": [_Notification.default.icon, _Notification.default[props.type]]
        }
      }), (0, _compositionApi.createElement)("div", {
        "class": _Notification.default.content
      }, [(_context$slots$defaul = (_context$slots = context.slots).default) === null || _context$slots$defaul === void 0 ? void 0 : _context$slots$defaul.call(_context$slots)]), (0, _compositionApi.createElement)(_Button.default, {
        "attrs": {
          "elevated": false,
          "small": true,
          "round": true,
          "inverse": true,
          "noBorder": true,
          "componentClass": [_Notification.default.close]
        },
        "on": {
          "click": function click() {
            return context.emit("close");
          }
        }
      }, [(0, _compositionApi.createElement)(_Icon.default, {
        "attrs": {
          "name": "close",
          "size": "small",
          "inverse": true
        }
      })])]);
    };
  }
});
var _default2 = Notification;
exports.default = _default2;