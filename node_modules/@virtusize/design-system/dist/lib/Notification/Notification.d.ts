import { PropType } from "@vue/composition-api";
declare type NotificationType = "error" | "information" | "success";
/**
 * Provides user feedback from typical actions through meaningful messages.
 * @param {boolean} autoClose - Dismiss Notification automatically after a set timeout.
 * @param {number} autoCloseDelay - Specify the autoClose delay in milliseconds. Defaults to 2000.
 * @param {array} componentClass - Use custom classes on the component.
 * @param {boolean} isTimeout - DEPRECATED: Dismiss Notification automatically after a set timeout.
 * @param {boolean} open - Display the Notification.
 * @param {function} onClose - Callback function to invoke when Notification is dismissed
 * @param {string} type - Specify what type of Notification to display. Supported values are information, error, success. Defaults to information.
 * @param {boolean} visible - DEPRECATED: Display the Notification.
 */
declare const Notification: import("vue").ComponentOptions<import("vue").default, () => false | JSX.Element, never, never, {
    autoClose: BooleanConstructor;
    autoCloseDelay: {
        type: NumberConstructor;
        default: () => 2000;
        validator: (prop: number) => boolean;
    };
    componentClass: {
        type: PropType<string[]>;
        default: () => never[];
    };
    isTimeout: BooleanConstructor;
    open: {
        type: BooleanConstructor;
        default: () => false;
    };
    onClose: PropType<() => void>;
    type: {
        type: PropType<NotificationType>;
        default: () => "information";
    };
    visible: {
        type: BooleanConstructor;
        default: () => false;
    };
}, import("@vue/composition-api/dist/component/componentProps").ExtractPropTypes<{
    autoClose: BooleanConstructor;
    autoCloseDelay: {
        type: NumberConstructor;
        default: () => 2000;
        validator: (prop: number) => boolean;
    };
    componentClass: {
        type: PropType<string[]>;
        default: () => never[];
    };
    isTimeout: BooleanConstructor;
    open: {
        type: BooleanConstructor;
        default: () => false;
    };
    onClose: PropType<() => void>;
    type: {
        type: PropType<NotificationType>;
        default: () => "information";
    };
    visible: {
        type: BooleanConstructor;
        default: () => false;
    };
}, false>> & (new () => import("@vue/composition-api").ComponentRenderProxy<import("@vue/composition-api/dist/component/componentProps").ExtractPropTypes<{
    autoClose: BooleanConstructor;
    autoCloseDelay: {
        type: NumberConstructor;
        default: () => 2000;
        validator: (prop: number) => boolean;
    };
    componentClass: {
        type: PropType<string[]>;
        default: () => never[];
    };
    isTimeout: BooleanConstructor;
    open: {
        type: BooleanConstructor;
        default: () => false;
    };
    onClose: PropType<() => void>;
    type: {
        type: PropType<NotificationType>;
        default: () => "information";
    };
    visible: {
        type: BooleanConstructor;
        default: () => false;
    };
}, true>, () => false | JSX.Element, import("@vue/composition-api/dist/component/componentProps").ExtractPropTypes<{
    autoClose: BooleanConstructor;
    autoCloseDelay: {
        type: NumberConstructor;
        default: () => 2000;
        validator: (prop: number) => boolean;
    };
    componentClass: {
        type: PropType<string[]>;
        default: () => never[];
    };
    isTimeout: BooleanConstructor;
    open: {
        type: BooleanConstructor;
        default: () => false;
    };
    onClose: PropType<() => void>;
    type: {
        type: PropType<NotificationType>;
        default: () => "information";
    };
    visible: {
        type: BooleanConstructor;
        default: () => false;
    };
}, false>>);
export default Notification;
