import { PropType } from "@vue/composition-api";
import { ChangeEvent, KeyboardEvent, MouseEvent } from "../../@types/tsx.shim";
declare type Type = "text" | "password" | "number" | "email";
/**
 * Render a text input field in the document.
 * @param {array} componentClass - Add custom classes on the component.
 * @param {boolean} error - Show TextField in error mode.
 * @param {boolean} fluid - Set the TextField to consume all available width.
 * @param {string} message - Show a meesage below TextField.
 * @param {function} onChange - Set a function to be called when TextField changes value then loses focus.
 * @param {function} onClick - Set a function to be called when TextField is clicked.
 * @param {function} onKeyup - Set a function to be called when a key is pressed while TextField is in focus.
 * @param {string} placeholder - Display a placeholder text when TextField has no value.
 * @param {function} type - Set the type of the text input. Defaults to text.
 * @param {string} value - Set a value on the component.
 */
declare type Event = MouseEvent;
declare const TextField: import("vue").ComponentOptions<import("vue").default, () => JSX.Element, never, never, {
    componentClass: {
        type: PropType<string[]>;
        default: () => never[];
    };
    error: BooleanConstructor;
    fluid: BooleanConstructor;
    message: StringConstructor;
    onChange: PropType<(value: string, event: ChangeEvent<Element>) => void>;
    onClick: PropType<(value: string, event: Event) => void>;
    onKeyup: PropType<(value: string, event: KeyboardEvent<Element>) => void>;
    onBlur: PropType<(value: string, event: FocusEvent) => void>;
    onFocus: PropType<(value: string, event: FocusEvent) => void>;
    placeholder: StringConstructor;
    type: PropType<Type>;
    value: StringConstructor;
}, import("@vue/composition-api/dist/component/componentProps").ExtractPropTypes<{
    componentClass: {
        type: PropType<string[]>;
        default: () => never[];
    };
    error: BooleanConstructor;
    fluid: BooleanConstructor;
    message: StringConstructor;
    onChange: PropType<(value: string, event: ChangeEvent<Element>) => void>;
    onClick: PropType<(value: string, event: Event) => void>;
    onKeyup: PropType<(value: string, event: KeyboardEvent<Element>) => void>;
    onBlur: PropType<(value: string, event: FocusEvent) => void>;
    onFocus: PropType<(value: string, event: FocusEvent) => void>;
    placeholder: StringConstructor;
    type: PropType<Type>;
    value: StringConstructor;
}, false>> & (new () => import("@vue/composition-api").ComponentRenderProxy<import("@vue/composition-api/dist/component/componentProps").ExtractPropTypes<{
    componentClass: {
        type: PropType<string[]>;
        default: () => never[];
    };
    error: BooleanConstructor;
    fluid: BooleanConstructor;
    message: StringConstructor;
    onChange: PropType<(value: string, event: ChangeEvent<Element>) => void>;
    onClick: PropType<(value: string, event: Event) => void>;
    onKeyup: PropType<(value: string, event: KeyboardEvent<Element>) => void>;
    onBlur: PropType<(value: string, event: FocusEvent) => void>;
    onFocus: PropType<(value: string, event: FocusEvent) => void>;
    placeholder: StringConstructor;
    type: PropType<Type>;
    value: StringConstructor;
}, true>, () => JSX.Element, import("@vue/composition-api/dist/component/componentProps").ExtractPropTypes<{
    componentClass: {
        type: PropType<string[]>;
        default: () => never[];
    };
    error: BooleanConstructor;
    fluid: BooleanConstructor;
    message: StringConstructor;
    onChange: PropType<(value: string, event: ChangeEvent<Element>) => void>;
    onClick: PropType<(value: string, event: Event) => void>;
    onKeyup: PropType<(value: string, event: KeyboardEvent<Element>) => void>;
    onBlur: PropType<(value: string, event: FocusEvent) => void>;
    onFocus: PropType<(value: string, event: FocusEvent) => void>;
    placeholder: StringConstructor;
    type: PropType<Type>;
    value: StringConstructor;
}, false>>);
export default TextField;
