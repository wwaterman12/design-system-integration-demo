"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _vue = _interopRequireDefault(require("vue"));

var _compositionApi = require("@vue/composition-api");

var _TextView = _interopRequireDefault(require("../TextView"));

var _ScaleBar = _interopRequireDefault(require("./ScaleBar.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @param {number} value - Set the ScaleBar value between 1-100 (in percentage, whole integers only).
 * @param {Label[]} labels - array containing information what label should be displayed at what value ranges
 * @param {array} componentClass - Add custom classes on the component.
 */
var ScaleBar = (0, _compositionApi.createComponent)({
  name: "ScaleBar",
  props: {
    value: {
      type: Number,
      required: true,
      validator: function validator(prop) {
        return prop > -1 && prop <= 100;
      }
    },
    labels: {
      type: Array,
      default: function _default() {
        return [];
      }
    },
    componentClass: {
      type: Array,
      default: function _default() {
        return [];
      }
    }
  },
  setup: function setup(props, context) {
    var ballPadding = 18;
    var labelText = (0, _compositionApi.ref)("");
    var labelOffset = (0, _compositionApi.ref)(0);
    var ballOffset = (0, _compositionApi.ref)(ballPadding);

    var recalculate = function recalculate() {
      calculateLabelText();
      calculateBallOffset();

      _vue.default.nextTick(function () {
        calculateLabelOffset();
      });
    };

    (0, _compositionApi.onMounted)(function () {
      return recalculate();
    });
    (0, _compositionApi.watch)(function () {
      return props.value;
    }, function (_, oldValue) {
      return oldValue !== undefined && recalculate();
    });

    var calculateLabelText = function calculateLabelText() {
      var _props$labels$reverse;

      labelText.value = ((_props$labels$reverse = props.labels.reverse().find(function (l) {
        return l.value <= props.value;
      })) === null || _props$labels$reverse === void 0 ? void 0 : _props$labels$reverse.label) || "";
    };

    var calculateLabelOffset = function calculateLabelOffset() {
      var container = context.refs.container;
      var label = context.refs.label;

      var _container$getBoundin = container.getBoundingClientRect(),
          containerWidth = _container$getBoundin.width;

      var _label$getBoundingCli = label.getBoundingClientRect(),
          labelWidth = _label$getBoundingCli.width;

      var offset = containerWidth * (props.value / 100) - labelWidth / 2;
      if (offset < 0) offset = 0;
      if (offset + labelWidth >= containerWidth) offset = containerWidth - labelWidth;
      labelOffset.value = offset;
    };

    var calculateBallOffset = function calculateBallOffset() {
      var container = context.refs.container;
      var ball = context.refs.ball;

      var _container$getBoundin2 = container.getBoundingClientRect(),
          containerWidth = _container$getBoundin2.width;

      var _ball$getBoundingClie = ball.getBoundingClientRect(),
          ballWidth = _ball$getBoundingClie.width;

      var offset = containerWidth * (props.value / 100) - ballWidth / 2;
      if (offset < ballPadding) offset = ballPadding;
      if (offset + ballWidth >= containerWidth - ballPadding) offset = containerWidth - ballWidth - ballPadding;
      ballOffset.value = offset;
    };

    return function () {
      return (0, _compositionApi.createElement)("div", {
        "ref": "container",
        "class": [_ScaleBar.default.root].concat(props.componentClass)
      }, [(0, _compositionApi.createElement)("span", {
        "ref": "label",
        "class": _ScaleBar.default.label,
        "style": {
          marginLeft: "".concat(labelOffset.value, "px")
        }
      }, [(0, _compositionApi.createElement)(_TextView.default, {
        "attrs": {
          "size": "smaller",
          "color": "inherit",
          "noWrap": true
        }
      }, [labelText.value])]), (0, _compositionApi.createElement)("div", {
        "class": [_ScaleBar.default.bar]
      }, [(0, _compositionApi.createElement)("div", {
        "ref": "ball",
        "class": _ScaleBar.default.ball,
        "style": {
          marginLeft: "".concat(ballOffset.value, "px")
        }
      })])]);
    };
  }
});
var _default2 = ScaleBar;
exports.default = _default2;