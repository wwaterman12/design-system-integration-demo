import { PropType } from "@vue/composition-api";
import { ChangeEvent } from "../../@types/tsx.shim";
interface Option {
    label: string;
    value: string;
}
/**
 * Render a picker for choosing languages
 * @param {array} componentClass - Add custom classes on the component.
 * @param {array} languages - An array of languages in format: { label: "English", value: "en" }
 * @param {string} value - Set the value to be shown.
 */
declare const LanguagePicker: import("vue").ComponentOptions<import("vue").default, () => JSX.Element, never, never, {
    componentClass: {
        type: PropType<string[]>;
        default: () => never[];
    };
    languages: {
        type: PropType<Option[]>;
        default: () => {
            label: string;
            value: string;
        }[];
    };
    onChange: PropType<(value: string, event: ChangeEvent<Element>) => void>;
    value: StringConstructor;
    inverse: BooleanConstructor;
}, import("@vue/composition-api/dist/component/componentProps").ExtractPropTypes<{
    componentClass: {
        type: PropType<string[]>;
        default: () => never[];
    };
    languages: {
        type: PropType<Option[]>;
        default: () => {
            label: string;
            value: string;
        }[];
    };
    onChange: PropType<(value: string, event: ChangeEvent<Element>) => void>;
    value: StringConstructor;
    inverse: BooleanConstructor;
}, false>> & (new () => import("@vue/composition-api").ComponentRenderProxy<import("@vue/composition-api/dist/component/componentProps").ExtractPropTypes<{
    componentClass: {
        type: PropType<string[]>;
        default: () => never[];
    };
    languages: {
        type: PropType<Option[]>;
        default: () => {
            label: string;
            value: string;
        }[];
    };
    onChange: PropType<(value: string, event: ChangeEvent<Element>) => void>;
    value: StringConstructor;
    inverse: BooleanConstructor;
}, true>, () => JSX.Element, import("@vue/composition-api/dist/component/componentProps").ExtractPropTypes<{
    componentClass: {
        type: PropType<string[]>;
        default: () => never[];
    };
    languages: {
        type: PropType<Option[]>;
        default: () => {
            label: string;
            value: string;
        }[];
    };
    onChange: PropType<(value: string, event: ChangeEvent<Element>) => void>;
    value: StringConstructor;
    inverse: BooleanConstructor;
}, false>>);
export default LanguagePicker;
