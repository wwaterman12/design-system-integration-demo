"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _compositionApi = require("@vue/composition-api");

var _Icon = _interopRequireDefault(require("../Icon"));

var _Select = _interopRequireDefault(require("../Select"));

var _LanguagePicker = _interopRequireDefault(require("./LanguagePicker.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Render a picker for choosing languages
 * @param {array} componentClass - Add custom classes on the component.
 * @param {array} languages - An array of languages in format: { label: "English", value: "en" }
 * @param {string} value - Set the value to be shown.
 */
var LanguagePicker = (0, _compositionApi.createComponent)({
  name: "LanguagePicker",
  props: {
    componentClass: {
      type: Array,
      default: function _default() {
        return [];
      }
    },
    languages: {
      type: Array,
      default: function _default() {
        return [{
          label: "English",
          value: "en"
        }, {
          label: "日本語",
          value: "ja"
        }, {
          label: "한국어",
          value: "ko"
        }];
      }
    },
    onChange: Object,
    value: String,
    inverse: Boolean
  },
  setup: function setup(props, context) {
    var onChange = function onChange(value, event) {
      context.emit("change", value, event);
    };

    return function () {
      return (0, _compositionApi.createElement)("div", {
        "class": [_LanguagePicker.default.root].concat(props.componentClass)
      }, [(0, _compositionApi.createElement)(_Icon.default, {
        "attrs": {
          "name": "globe",
          "size": "small",
          "inverse": props.inverse
        }
      }), (0, _compositionApi.createElement)(_Select.default, {
        "attrs": {
          "options": props.languages,
          "value": props.value,
          "inverse": props.inverse,
          "noBorder": true,
          "small": true,
          "componentClass": [_LanguagePicker.default.select]
        },
        "on": {
          "change": onChange
        }
      })]);
    };
  }
});
var _default2 = LanguagePicker;
exports.default = _default2;