"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _compositionApi = require("@vue/composition-api");

var _TextView = _interopRequireDefault(require("./TextView.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var TAGS = {
  h1: "h1",
  h2: "h2",
  h3: "h3",
  h4: "h4",
  h5: "h5",
  h6: "h6",
  p: "p",
  span: "span"
};
/**
 * Render text in the document.
 * @param {string} align - Set the text alignment. Only works if variant is set with the exception of span, or block is enabled.
 * @param {string} color - Set the text color. When set, inverse prop is ignored.
 * @param {array} componentClass - Add custom classes on the component.
 * @param {string} inverse - Set the inverted color scheme. Ignored when color prop is set.
 * @param {string} lang - Set the text's language language. If not set, it will try to get the nearest parent's language (<html> is the topmost parent).
 * @param {boolean} noWrap - Set the text not to wrap once it exceeds the containing parent width. It will also conditionally truncate the text with an ellipsis.
 * @param {string} size - The font size. Acceptable values are larger, large, normal, small, smaller. Defaults to normal.
 * @param {string} weight - The font weight. Acceptable values are bold, medium, regular. Defaults to regular.
 * @param {boolean} underlined - Show an underline on the component.
 * @param {string} variant - Specify the tag you want to use. Acceptable values are h1, h2, h3, h4, h5, h6, p, span. Defaults to span.
 */

var TextView = (0, _compositionApi.createComponent)({
  name: "TextView",
  props: {
    align: String,
    block: Boolean,
    color: String,
    inverse: Boolean,
    componentClass: {
      type: Array,
      default: function _default() {
        return [];
      }
    },
    lang: String,
    noWrap: Boolean,
    size: {
      type: String,
      default: function _default() {
        return "normal";
      }
    },
    tag: {
      type: String,
      default: function _default() {
        return "span";
      }
    },
    underlined: Boolean,
    weight: {
      type: String,
      default: function _default() {
        return "regular";
      }
    }
  },
  setup: function setup(props, context) {
    // Use the correct tag
    var Element = TAGS[props.tag];
    return function () {
      var _context$slots$defaul, _context$slots;

      return (0, _compositionApi.createElement)(Element, {
        "class": [_TextView.default.root, props.tag !== "span" ? _TextView.default[props.tag] : "", props.align ? _TextView.default[props.align] : "", props.block ? _TextView.default.blockLevel : "", props.inverse ? _TextView.default.inverse : "", props.noWrap ? _TextView.default.noWrap : "", props.underlined ? _TextView.default.underlined : "", _TextView.default[props.size], _TextView.default[props.weight]].concat(props.componentClass),
        "style": {
          color: props.color
        },
        "attrs": {
          "lang": props.lang || null
        }
      }, [(_context$slots$defaul = (_context$slots = context.slots).default) === null || _context$slots$defaul === void 0 ? void 0 : _context$slots$defaul.call(_context$slots)]);
    };
  }
});
var _default2 = TextView;
exports.default = _default2;