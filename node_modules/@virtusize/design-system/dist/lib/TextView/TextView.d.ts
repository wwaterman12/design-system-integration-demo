import { PropType } from "@vue/composition-api";
declare type Align = "left" | "right" | "center" | "justify";
declare type Lang = "en" | "ja" | "ko";
declare type Size = "smaller" | "small" | "normal" | "large" | "larger";
declare type Tag = "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "p" | "span";
declare type Weight = "thin" | "regular" | "medium" | "bold";
/**
 * Render text in the document.
 * @param {string} align - Set the text alignment. Only works if variant is set with the exception of span, or block is enabled.
 * @param {string} color - Set the text color. When set, inverse prop is ignored.
 * @param {array} componentClass - Add custom classes on the component.
 * @param {string} inverse - Set the inverted color scheme. Ignored when color prop is set.
 * @param {string} lang - Set the text's language language. If not set, it will try to get the nearest parent's language (<html> is the topmost parent).
 * @param {boolean} noWrap - Set the text not to wrap once it exceeds the containing parent width. It will also conditionally truncate the text with an ellipsis.
 * @param {string} size - The font size. Acceptable values are larger, large, normal, small, smaller. Defaults to normal.
 * @param {string} weight - The font weight. Acceptable values are bold, medium, regular. Defaults to regular.
 * @param {boolean} underlined - Show an underline on the component.
 * @param {string} variant - Specify the tag you want to use. Acceptable values are h1, h2, h3, h4, h5, h6, p, span. Defaults to span.
 */
declare const TextView: import("vue").ComponentOptions<import("vue").default, () => JSX.Element, never, never, {
    align: PropType<Align>;
    block: BooleanConstructor;
    color: StringConstructor;
    inverse: BooleanConstructor;
    componentClass: {
        type: PropType<string[]>;
        default: () => never[];
    };
    lang: PropType<Lang>;
    noWrap: BooleanConstructor;
    size: {
        type: PropType<Size>;
        default: () => "normal";
    };
    tag: {
        type: PropType<Tag>;
        default: () => "span";
    };
    underlined: BooleanConstructor;
    weight: {
        type: PropType<Weight>;
        default: () => "regular";
    };
}, import("@vue/composition-api/dist/component/componentProps").ExtractPropTypes<{
    align: PropType<Align>;
    block: BooleanConstructor;
    color: StringConstructor;
    inverse: BooleanConstructor;
    componentClass: {
        type: PropType<string[]>;
        default: () => never[];
    };
    lang: PropType<Lang>;
    noWrap: BooleanConstructor;
    size: {
        type: PropType<Size>;
        default: () => "normal";
    };
    tag: {
        type: PropType<Tag>;
        default: () => "span";
    };
    underlined: BooleanConstructor;
    weight: {
        type: PropType<Weight>;
        default: () => "regular";
    };
}, false>> & (new () => import("@vue/composition-api").ComponentRenderProxy<import("@vue/composition-api/dist/component/componentProps").ExtractPropTypes<{
    align: PropType<Align>;
    block: BooleanConstructor;
    color: StringConstructor;
    inverse: BooleanConstructor;
    componentClass: {
        type: PropType<string[]>;
        default: () => never[];
    };
    lang: PropType<Lang>;
    noWrap: BooleanConstructor;
    size: {
        type: PropType<Size>;
        default: () => "normal";
    };
    tag: {
        type: PropType<Tag>;
        default: () => "span";
    };
    underlined: BooleanConstructor;
    weight: {
        type: PropType<Weight>;
        default: () => "regular";
    };
}, true>, () => JSX.Element, import("@vue/composition-api/dist/component/componentProps").ExtractPropTypes<{
    align: PropType<Align>;
    block: BooleanConstructor;
    color: StringConstructor;
    inverse: BooleanConstructor;
    componentClass: {
        type: PropType<string[]>;
        default: () => never[];
    };
    lang: PropType<Lang>;
    noWrap: BooleanConstructor;
    size: {
        type: PropType<Size>;
        default: () => "normal";
    };
    tag: {
        type: PropType<Tag>;
        default: () => "span";
    };
    underlined: BooleanConstructor;
    weight: {
        type: PropType<Weight>;
        default: () => "regular";
    };
}, false>>);
export default TextView;
