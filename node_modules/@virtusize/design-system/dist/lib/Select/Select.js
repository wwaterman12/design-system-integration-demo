"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _compositionApi = require("@vue/composition-api");

var _Button = _interopRequireDefault(require("../Button"));

var _Icon = _interopRequireDefault(require("../Icon"));

var _Select = _interopRequireDefault(require("./Select.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Select an option from a list of options
 * @param {boolean} inverse - Set the inverted color scheme.
 * @param {boolean} noBorder - Remove the border around the component.
 * @param {Function} onBlur - optional callback fired when native select emits onBlur event
 * @param {array} options - Set the array of options. An option must be of format { label: "value", value: "value" }.
 * @param {string} placeholder - Display a message when nothing is selected.
 * @param {small} small - Render a small Select.
 * @param {string} textAlign - text alignment
 * @param {string} value - Set the value Select will show.
 * @param {array} componentClass - Add custom classes on the component.
 */
var Select = (0, _compositionApi.createComponent)({
  name: "Select",
  props: {
    componentClass: {
      type: Array,
      default: function _default() {
        return [];
      }
    },
    disabled: Boolean,
    inverse: Boolean,
    noBorder: Boolean,
    onChange: Object,
    onBlur: Object,
    options: {
      type: Array,
      default: function _default() {
        return [];
      }
    },
    placeholder: String,
    small: Boolean,
    textAlign: {
      type: String,
      default: function _default() {
        return "center";
      }
    },
    value: String
  },
  setup: function setup(props, context) {
    var onChange = function onChange(event) {
      context.emit("change", event.target.value, event);
    };

    var onBlur = function onBlur() {
      return context.emit("blur");
    };

    return function () {
      var _props$options$find;

      return (0, _compositionApi.createElement)("div", {
        "class": [_Select.default.root, props.small ? _Select.default.small : ""].concat(props.componentClass)
      }, [(0, _compositionApi.createElement)(_Button.default, {
        "attrs": {
          "elevated": false,
          "weight": "regular",
          "textAlign": props.textAlign,
          "small": props.small,
          "noBorder": props.noBorder,
          "inverse": props.inverse,
          "disabled": props.disabled
        }
      }, [((_props$options$find = props.options.find(function (option) {
        return option.value === props.value;
      })) === null || _props$options$find === void 0 ? void 0 : _props$options$find.label) || props.placeholder, (0, _compositionApi.createElement)(_Icon.default, {
        "attrs": {
          "name": "angleDown",
          "inverse": props.inverse,
          "size": props.small ? "small" : "normal"
        },
        "slot": "trailing"
      })]), (0, _compositionApi.createElement)("select", {
        "class": _Select.default.select,
        "domProps": {
          "value": props.value
        },
        "on": {
          "change": onChange,
          "blur": onBlur
        },
        "attrs": {
          "disabled": props.disabled
        }
      }, [props.options.map(function (option) {
        return (0, _compositionApi.createElement)("option", {
          "domProps": {
            "value": option.value
          },
          "key": option.value
        }, [option.label]);
      })])]);
    };
  }
});
var _default2 = Select;
exports.default = _default2;