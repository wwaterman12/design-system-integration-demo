import { PropType } from "@vue/composition-api";
import { ChangeEvent } from "../../@types/tsx.shim";
interface Option {
    label: string;
    value: string;
}
/**
 * Select an option from a list of options
 * @param {boolean} inverse - Set the inverted color scheme.
 * @param {boolean} noBorder - Remove the border around the component.
 * @param {Function} onBlur - optional callback fired when native select emits onBlur event
 * @param {array} options - Set the array of options. An option must be of format { label: "value", value: "value" }.
 * @param {string} placeholder - Display a message when nothing is selected.
 * @param {small} small - Render a small Select.
 * @param {string} textAlign - text alignment
 * @param {string} value - Set the value Select will show.
 * @param {array} componentClass - Add custom classes on the component.
 */
declare const Select: import("vue").ComponentOptions<import("vue").default, () => JSX.Element, never, never, {
    componentClass: {
        type: PropType<string[]>;
        default: () => never[];
    };
    disabled: BooleanConstructor;
    inverse: BooleanConstructor;
    noBorder: BooleanConstructor;
    onChange: PropType<(value: string, event: ChangeEvent<Element>) => void>;
    onBlur: PropType<() => void>;
    options: {
        type: PropType<Option[]>;
        default: () => never[];
    };
    placeholder: StringConstructor;
    small: BooleanConstructor;
    textAlign: {
        type: PropType<"left" | "right" | "center" | "justify">;
        default: () => "center";
    };
    value: StringConstructor;
}, import("@vue/composition-api/dist/component/componentProps").ExtractPropTypes<{
    componentClass: {
        type: PropType<string[]>;
        default: () => never[];
    };
    disabled: BooleanConstructor;
    inverse: BooleanConstructor;
    noBorder: BooleanConstructor;
    onChange: PropType<(value: string, event: ChangeEvent<Element>) => void>;
    onBlur: PropType<() => void>;
    options: {
        type: PropType<Option[]>;
        default: () => never[];
    };
    placeholder: StringConstructor;
    small: BooleanConstructor;
    textAlign: {
        type: PropType<"left" | "right" | "center" | "justify">;
        default: () => "center";
    };
    value: StringConstructor;
}, false>> & (new () => import("@vue/composition-api").ComponentRenderProxy<import("@vue/composition-api/dist/component/componentProps").ExtractPropTypes<{
    componentClass: {
        type: PropType<string[]>;
        default: () => never[];
    };
    disabled: BooleanConstructor;
    inverse: BooleanConstructor;
    noBorder: BooleanConstructor;
    onChange: PropType<(value: string, event: ChangeEvent<Element>) => void>;
    onBlur: PropType<() => void>;
    options: {
        type: PropType<Option[]>;
        default: () => never[];
    };
    placeholder: StringConstructor;
    small: BooleanConstructor;
    textAlign: {
        type: PropType<"left" | "right" | "center" | "justify">;
        default: () => "center";
    };
    value: StringConstructor;
}, true>, () => JSX.Element, import("@vue/composition-api/dist/component/componentProps").ExtractPropTypes<{
    componentClass: {
        type: PropType<string[]>;
        default: () => never[];
    };
    disabled: BooleanConstructor;
    inverse: BooleanConstructor;
    noBorder: BooleanConstructor;
    onChange: PropType<(value: string, event: ChangeEvent<Element>) => void>;
    onBlur: PropType<() => void>;
    options: {
        type: PropType<Option[]>;
        default: () => never[];
    };
    placeholder: StringConstructor;
    small: BooleanConstructor;
    textAlign: {
        type: PropType<"left" | "right" | "center" | "justify">;
        default: () => "center";
    };
    value: StringConstructor;
}, false>>);
export default Select;
