"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _babelHelperVueJsxMergeProps = _interopRequireDefault(require("@vue/babel-helper-vue-jsx-merge-props"));

var _compositionApi = require("@vue/composition-api");

var _iconImports = _interopRequireDefault(require("./icon-imports"));

var _Icon = _interopRequireDefault(require("./Icon.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Renders an SVG icon in the document.
 * @param {string} color - Set a fill color to use for the icon.
 * @param {array} componentClass - Add custom classes on the component.
 * @param {string} inverse - Set the inverted color scheme. Ignored when color is set.
 * @param {string} name - Name of the icon to render
 * @param {string} size - Set the icon size. Acceptable values are small, normal, large, larger. Defaults to normal.
 */
var Icon = (0, _compositionApi.createComponent)({
  name: "Icon",
  props: {
    color: String,
    componentClass: {
      type: Array,
      default: function _default() {
        return [];
      }
    },
    inverse: Boolean,
    name: {
      type: String,
      required: true
    },
    size: {
      type: String,
      default: function _default() {
        return "normal";
      }
    }
  },
  setup: function setup(props) {
    var svgContent = (0, _compositionApi.ref)("");
    (0, _compositionApi.watch)(function () {
      return props.name;
    }, function _callee(newName) {
      return regeneratorRuntime.async(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return regeneratorRuntime.awrap(_iconImports.default[newName]());

            case 2:
              svgContent.value = _context.sent.default;

            case 3:
            case "end":
              return _context.stop();
          }
        }
      });
    });
    return function () {
      return (0, _compositionApi.createElement)("span", (0, _babelHelperVueJsxMergeProps.default)([{
        "class": [_Icon.default.root, _Icon.default[props.size], props.inverse ? _Icon.default.inverse : ""].concat(props.componentClass),
        "style": {
          color: props.color
        }
      }, {
        "domProps": {
          innerHTML: svgContent.value
        }
      }]));
    };
  }
});
var _default2 = Icon;
exports.default = _default2;