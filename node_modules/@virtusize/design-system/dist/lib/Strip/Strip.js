"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _compositionApi = require("@vue/composition-api");

var _Button = _interopRequireDefault(require("../Button"));

var _Icon = _interopRequireDefault(require("../Icon"));

var _symbols = require("./symbols");

var _Strip = _interopRequireDefault(require("./Strip.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Strip = (0, _compositionApi.createComponent)({
  name: "Strip",
  props: {
    value: {
      type: String,
      required: true
    },
    selectedValue: String,
    componentClass: {
      type: Array,
      default: function _default() {
        return [];
      }
    },
    onChange: Object
  },
  setup: function setup(props, context) {
    var childrenValues = (0, _compositionApi.ref)([]);

    var getChildrenValues = function getChildrenValues() {
      // Convert HTMLCollection to a normal Array
      var childrenEls = Array.prototype.slice.call(context.refs.viewport.children);
      var childrenValues = childrenEls.map(function (child) {
        return child.getAttribute("data-value");
      });
      return childrenValues;
    };

    var state = (0, _compositionApi.ref)(props.value);
    var currentTick = (0, _compositionApi.ref)(0);

    var updateStateByTick = function updateStateByTick() {
      state.value = childrenValues.value[currentTick.value];
      context.emit("change", state.value);
    };

    (0, _compositionApi.watch)(function () {
      return props.value;
    }, function (newValue) {
      return state.value = newValue;
    });
    (0, _compositionApi.onMounted)(function _callee() {
      return regeneratorRuntime.async(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return regeneratorRuntime.awrap(context.root.$nextTick());

            case 2:
              childrenValues.value = getChildrenValues();
              currentTick.value = childrenValues.value.indexOf(props.value);

            case 4:
            case "end":
              return _context.stop();
          }
        }
      });
    });
    (0, _compositionApi.provide)(_symbols.SELECTED_VALUE, props.selectedValue);
    (0, _compositionApi.provide)(_symbols.VALUE, state);
    return function () {
      var _context$slots$defaul, _context$slots;

      return (0, _compositionApi.createElement)("div", {
        "class": [_Strip.default.root].concat(props.componentClass)
      }, [(0, _compositionApi.createElement)(_Button.default, {
        "attrs": {
          "round": true,
          "small": true,
          "noBorder": true,
          "disabled": currentTick.value === 0,
          "componentClass": [_Strip.default.control]
        },
        "on": {
          "click": function click() {
            currentTick.value--;
            updateStateByTick();
          }
        }
      }, [(0, _compositionApi.createElement)(_Icon.default, {
        "attrs": {
          "name": "angleLeft",
          "size": "small"
        }
      })]), (0, _compositionApi.createElement)("div", {
        "class": _Strip.default.viewport,
        "ref": "viewport"
      }, [(_context$slots$defaul = (_context$slots = context.slots).default) === null || _context$slots$defaul === void 0 ? void 0 : _context$slots$defaul.call(_context$slots)]), (0, _compositionApi.createElement)(_Button.default, {
        "attrs": {
          "round": true,
          "small": true,
          "noBorder": true,
          "disabled": currentTick.value === childrenValues.value.length - 1,
          "componentClass": [_Strip.default.control]
        },
        "on": {
          "click": function click() {
            currentTick.value++;
            updateStateByTick();
          }
        }
      }, [(0, _compositionApi.createElement)(_Icon.default, {
        "attrs": {
          "name": "angleRight",
          "size": "small"
        }
      })])]);
    };
  }
});
var _default2 = Strip;
exports.default = _default2;