"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _compositionApi = require("@vue/composition-api");

var _TextView = _interopRequireDefault(require("../TextView"));

var _Switch = _interopRequireDefault(require("./Switch.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

/**
 * @param {Value} value - A value Switch should display
 * @param {State[]} values - array containing information what label should be displayed
 * @param {array} componentClass - Add custom classes on the component.
 */
var Switch = (0, _compositionApi.createComponent)({
  name: "Switch",
  props: {
    value: {
      type: [String, Number]
    },
    values: {
      type: Array,
      default: function _default() {
        return [];
      }
    },
    onChange: Object,
    componentClass: {
      type: Array,
      default: function _default() {
        return [];
      }
    }
  },
  setup: function setup(props, context) {
    var toggle = function toggle() {
      var value = props.value,
          _props$values = _slicedToArray(props.values, 2),
          left = _props$values[0],
          right = _props$values[1];

      var toggledValue = value === left.value ? right.value : left.value;
      context.emit("change", toggledValue);
    };

    return function () {
      var value = props.value,
          _props$values2 = _slicedToArray(props.values, 2),
          left = _props$values2[0],
          right = _props$values2[1];

      var isLeft = value === left.value;
      return (0, _compositionApi.createElement)("div", {
        "ref": "container",
        "class": [_Switch.default.root].concat(props.componentClass)
      }, [(0, _compositionApi.createElement)("div", {
        "class": [_Switch.default.blob, !isLeft ? _Switch.default.blobRight : ""]
      }, [(0, _compositionApi.createElement)(_TextView.default, {
        "attrs": {
          "size": "smaller",
          "noWrap": true,
          "color": "inherit"
        }
      }, [(isLeft ? left : right).label])]), (0, _compositionApi.createElement)("div", {
        "on": {
          "click": toggle
        },
        "class": [_Switch.default.option, isLeft ? _Switch.default.active : ""]
      }, [(0, _compositionApi.createElement)(_TextView.default, {
        "attrs": {
          "size": "smaller",
          "color": "inherit"
        }
      }, [left.label])]), (0, _compositionApi.createElement)("div", {
        "on": {
          "click": toggle
        },
        "class": [_Switch.default.option, !isLeft ? _Switch.default.active : ""]
      }, [(0, _compositionApi.createElement)(_TextView.default, {
        "attrs": {
          "size": "smaller",
          "noWrap": true,
          "color": "inherit"
        }
      }, [right.label])])]);
    };
  }
});
var _default2 = Switch;
exports.default = _default2;